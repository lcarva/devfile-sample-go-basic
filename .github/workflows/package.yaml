---
name: Package

on:
  push:
  workflow_dispatch:

env:
  IMAGE_REGISTRY: quay.io
  IMAGE_REPO: lucarval/devfile-sample-go-basic

jobs:
  build:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest

    permissions:
      # Needed for signing the container image with GitHub OIDC Token
      id-token: write

    outputs:
      image:  ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPO }}
      digest: ${{ steps.push-image.outputs.digest }}

    steps:
    - uses: actions/checkout@v3

    - name: Install Cosign
      uses: sigstore/cosign-installer@main

    # - name: Install Syft
    #   uses: anchore/sbom-action/download-syft@v0.14.3

    - name: Log in to quay.io
      uses: redhat-actions/podman-login@v1
      with:
        username: ${{ vars.REGISTRY_QUAY_IO_USER }}
        password: ${{ secrets.REGISTRY_QUAY_IO_PASSWORD }}
        registry: quay.io

    - name: Buildah Action
      id: build-image
      uses: redhat-actions/buildah-build@v2
      with:
        image: ${{ env.IMAGE_REPO }}
        tags: ${{ github.sha }}
        dockerfiles: ./Dockerfile

    - name: Push to quay.io
      id: push-image
      uses: redhat-actions/push-to-registry@v2
      with:
        registry: ${{ env.IMAGE_REGISTRY }}
        image: ${{ steps.build-image.outputs.image }}
        tags: ${{ steps.build-image.outputs.tags }}

    # - name: Generate and store SBOM
    #   run: |
    #       syft "${IMAGE_REGISTRY}/${IMAGE_REPO}@${DIGEST}" -o spdx-json=sbom-spdx.json
    #       cosign attest --yes --predicate sbom-spdx.json --type spdx "${IMAGE_REGISTRY}/${IMAGE_REPO}@${DIGEST}"
    #   env:
    #     DIGEST: ${{ steps.push-image.outputs.digest }}

  provenance:
    needs: [build]
    permissions:
      actions: read # for detecting the Github Actions environment.
      id-token: write # for creating OIDC tokens for signing.
      packages: write # for uploading attestations.
    if: ${{ github.ref == 'refs/heads/main' }}
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.9.0
    with:
      image: ${{ needs.build.outputs.image }}
      digest: ${{ needs.build.outputs.digest }}
      registry-username: ${{ vars.REGISTRY_QUAY_IO_USER }}
    secrets:
      registry-password: ${{ secrets.REGISTRY_QUAY_IO_PASSWORD }}

  deployment:
    needs: [build, provenance]
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest

    env:
      IMAGE_REF: ${{ needs.build.outputs.image }}:${{ github.sha }}@${{ needs.build.outputs.digest }}

    steps:
    - name: Validate
      uses: enterprise-contract/action-validate-image@v1.1
      with:
        image: ${{ env.IMAGE_REF }}
        policy: ""
        identity: ".*"
        issuer: https://token.actions.githubusercontent.com
        extra-params: --strict --output yaml

    - name: Clone deployment repo
      uses: actions/checkout@v3
      with:
        repository: lcarva/devfile-sample-go-basic-deploy
        ref: main

    - name: Update deployment
      run: ./hack/update-image.sh $IMAGE_REF

    - name: Commit deployment changes
      run: |
        set -exuo pipefail

        git diff

        # Copied from https://github.com/enterprise-contract/infra-deployments-ci/blob/main/hack/create-pr.sh
        git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
        git config --global user.name "${GITHUB_ACTOR}"
        mkdir -p "${HOME}/.ssh"
        echo "${DEPLOY_KEY}" > "${HOME}/.ssh/id_ed25519"
        chmod 600 "${HOME}/.ssh/id_ed25519"
        trap 'rm -rf "${HOME}/.ssh/id_rsa"' EXIT

        # Ensure repo is checked out with SSH.
        git remote set-url origin git@github.com:lcarva/devfile-sample-go-basic-deploy.git

        git commit -a -m "Update deployment image to $IMAGE_REF"
        git push
      env:
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
